# Multi-stage Dockerfile for FeeDLooP production deployment
# Based on working Bucksbook pattern with Node.js environment setup

# Use the official Node.js 20 image as the base image
FROM node:20-alpine AS base

# Install dependencies only when needed
FROM base AS deps
# Add curl for health checks and debugging
RUN apk add --no-cache libc6-compat curl bash
WORKDIR /app

# Install dependencies based on the preferred package manager
COPY package.json package-lock.json* ./
RUN npm ci

# Rebuild the source code only when needed
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Set up environment variables using script (avoids Coolify truncation)
RUN node scripts/setup-env.js

# Environment variables for build
ENV NEXT_TELEMETRY_DISABLED=1

# Build the application
RUN npm run build

# Production image, copy all the files and run next
FROM base AS runner
WORKDIR /app

ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# Add curl and bash to the runtime for health checks and debugging
RUN apk add --no-cache curl bash

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copy built application
COPY --from=builder /app/public ./public

# Automatically leverage output traces to reduce image size
# https://nextjs.org/docs/advanced-features/output-file-tracing
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

# Copy environment setup and debug scripts
COPY --chown=nextjs:nodejs scripts/setup-env.js ./scripts/
COPY --chown=nextjs:nodejs docker-debug.js ./

USER nextjs

EXPOSE 3000

ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD curl -f http://localhost:3000/api/health || exit 1

# Start the application with environment setup and debug logging
CMD ["sh", "-c", "node scripts/setup-env.js && node docker-debug.js && node server.js"]